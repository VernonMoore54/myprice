task.wait(4)

--[[
    Этот скрипт предоставляет несколько "стандартных" методов для программного
    нажатия на GUI кнопку в Roblox. Эти способы часто более надёжны, чем
    симуляция пользовательского ввода, так как они работают на более низком уровне.
]]

--==============================================================================
-- Функция поиска кнопки (остаётся без изменений)
--==============================================================================
-- Эта функция ищет TextButton, у которого есть дочерний TextLabel с текстом "farmilka".
local function findButtonByLabelText(searchText)
    local coreGui = game:GetService("CoreGui")
    for _, descendant in ipairs(coreGui:GetDescendants()) do
        if descendant.Name == "ButtonLabel" and descendant:IsA("TextLabel") and descendant.Text == searchText then
            if descendant.Parent and descendant.Parent:IsA("TextButton") then
                print("Найдена кнопка для текста: " .. searchText)
                return descendant.Parent
            end
        end
    end
    warn("Кнопка с текстом '" .. searchText .. "' не найдена.")
    return nil
end

--==============================================================================
-- ОБЗОР СТАНДАРТНЫХ МЕТОДОВ
--==============================================================================
--[[
    1.  ПРЯМОЙ ВЫЗОВ СОБЫТИЯ (.Fire())
        -----------------------------
        РАБОТА: Это самый прямой и надёжный метод. Он не симулирует клик, а напрямую
        "запускает" событие MouseButton1Click на объекте кнопки. Все функции, которые
        подписаны на это событие (`button.MouseButton1Click:Connect(...)`), будут
        вызваны немедленно.
        ПРЕИМУЩЕСТВА: Работает независимо от видимости, положения на экране и свойства
        `Active` кнопки. Обходит любые проверки, связанные с положением курсора.
        Это "чистый" программный триггер.

    2.  ИЗМЕНЕНИЕ СВОЙСТВА .Selected
        -----------------------------
        РАБОТА: Этот метод изменяет свойство `Selected` у кнопки на `true`, а затем
        сразу же обратно на `false`. Некоторые скрипты могут быть написаны так,
        чтобы реагировать на изменение этого свойства, а не на сам клик.
        ПРЕИМУЩЕСТВА: Может сработать, если логика кнопки завязана на её "состояние",
        а не на событие клика.
        НЕДОСТАТКИ: Менее надёжен, так как большинство скриптов используют именно
        событие `MouseButton1Click`.

    3.  ИСПОЛЬЗОВАНИЕ `Activated`
        -----------------------------
        РАБОТА: Событие `Activated` является более высокоуровневым, чем `MouseButton1Click`.
        Оно срабатывает как от клика мыши, так и от нажатия на экране (на мобильных
        устройствах). Вызов этого события может быть более универсальным.
        ПРЕИМУЩЕСТВА: Похож на метод 1, но может охватывать больше сценариев,
        если разработчик использовал `.Activated` вместо `.MouseButton1Click`.
]]
--==============================================================================

-- Метод 1: Прямой вызов события MouseButton1Click (Самый рекомендуемый)
local function triggerWithEventFire()
    print("Запуск метода 1: Прямой вызов события...")
    local buttonToClick = findButtonByLabelText("farmilka")
    
    if buttonToClick then
        -- Напрямую вызываем событие клика левой кнопкой мыши.
        -- Все подключенные к нему функции будут исполнены.
        buttonToClick.MouseButton1Click:Fire()
        print("Метод 1: Событие MouseButton1Click было успешно вызвано.")
    else
        warn("Метод 1: Не удалось вызвать событие, кнопка не найдена.")
    end
end

-- Метод 2: Изменение свойства .Selected
local function triggerWithSelectedProperty()
    print("Запуск метода 2: Изменение свойства .Selected...")
    local buttonToClick = findButtonByLabelText("farmilka")
    
    if buttonToClick then
        -- Некоторые скрипты могут отслеживать изменение этого свойства
        buttonToClick.Selected = true
        task.wait() -- Небольшая пауза, чтобы скрипт успел среагировать
        buttonToClick.Selected = false
        print("Метод 2: Свойство .Selected было изменено.")
    else
        warn("Метод 2: Не удалось изменить свойство, кнопка не найдена.")
    end
end

-- Метод 3: Вызов события Activated
local function triggerWithActivatedEvent()
    print("Запуск метода 3: Вызов события .Activated...")
    local buttonToClick = findButtonByLabelText("farmilka")
    
    if buttonToClick then
        -- .Activated является обобщенным событием для активации кнопки
        -- (клик мыши, тап на экране и т.д.)
        buttonToClick.Activated:Fire()
        print("Метод 3: Событие .Activated было успешно вызвано.")
    else
        warn("Метод 3: Не удалось вызвать событие, кнопка не найдена.")
    end
end


--==============================================================================
-- ЗАПУСК
--==============================================================================
-- Попробуйте каждый метод по очереди. Раскомментируйте нужный и закомментируйте остальные.
-- Начните с первого, так как он самый надёжный.

-- ЗАПУСК МЕТОДА 1 (Рекомендуется)
triggerWithActivatedEvent()

-- ЗАПУСК МЕТОДА 2
-- triggerWithSelectedProperty()

-- ЗАПУСК МЕТОДА 3
-- triggerWithActivatedEvent()
